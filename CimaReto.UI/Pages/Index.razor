@page "/"

@using CimaReto.UI.Data
@inject EmployeeService EmployeeService
@inject IJSRuntime JsRuntime;

<div class="container">
    <div class="part-side">
        <button @onclick="message"><i class="btn btn-block oi oi-document"></i></button>
        <button @onclick="message"><i class="btn btn-block oi oi-dashboard"></i></button>
        <button @onclick="message"><i class="btn btn-block oi oi-hard-drive"></i></button>
    </div>
    <div class="part-center">
        <button @onclick="@(e => NavigateTo("prev"))">@("<")</button>
        <button @onclick="@(e => NavigateTo("first"))">@("<<")</button>
        @for (int i = 0; i < TotalPages; i++)
        {
            var pageNumber = i;
            <button class="btn @(CurrentPage == pageNumber? "btn-dark":"btn-info")"
                    @onclick="@(e => UpdateList(pageNumber))">
                @(i + 1)
            </button>
        }
        <button @onclick="@(e => NavigateTo("last"))">@(">>")</button>
        <button @onclick="@(e => NavigateTo("next"))">@(">")</button>
    </div>
    <div class="part-side">
        <button @onclick="message" class="btn btn-dark">Action1</button>
        <button @onclick="message" class="btn btn-dark">Action2</button>
        <button @onclick="message" class="btn btn-dark">Action3</button>
    </div>
</div>

@if (employee == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table" ReloadList="IsTableFiltered">
        <thead>
            <tr>
                <th><input type="checkbox" id="CheckA" @onclick="toggle" /></th>
                <th><input type="checkbox" id="CheckB" @onclick="toggle" /></th>
                <th><input type="checkbox" id="CheckC" @onclick="toggle" /></th>
                <th><input type="checkbox" id="CheckD" @onclick="toggle" /></th>
                <TableColumn ColumnTitle="Id"
                             OnSearchTextChanged="@(e => OnSearchTextChanged(e, "Id"))"></TableColumn>
                <TableColumn ColumnTitle="Name"
                             OnSearchTextChanged="@(e => OnSearchTextChanged(e, "Name"))"></TableColumn>
                <TableColumn ColumnTitle="LastName"
                             OnSearchTextChanged="@(e => OnSearchTextChanged(e, "LastName"))"></TableColumn>
                <TableColumn ColumnTitle="Direction"
                             OnSearchTextChanged="@(e => OnSearchTextChanged(e, "Direction"))"></TableColumn>
            </tr>
        </thead>
        <tbody>
            @foreach (var itemEmployee in filteredList)
            {
                <ContextMenuTrigger WrapperTag="tr" MenuId="tblContextMenu" Data="itemEmployee">
                    @*<tr>*@
            <td><input type="checkbox" id="CheckA@(itemEmployee.Id)" /></td>
            <td><input type="checkbox" id="CheckB@(itemEmployee.Id)" /></td>
            <td><input type="checkbox" id="CheckC@(itemEmployee.Id)" /></td>
            <td><input type="checkbox" id="CheckD@(itemEmployee.Id)" /></td>
            <td>@itemEmployee.Id</td>
            <td>@itemEmployee.Name</td>
            <td>@itemEmployee.LastName</td>
            <td>@itemEmployee.Direction</td>
            @*</tr>*@
            </ContextMenuTrigger>
        }
            </tbody>
        </table>

        <ContextMenu Id="tblContextMenu">
            <Item OnClick="@ReloadClick"><i class="btn btn-info oi oi-action-redo"></i> Reload</Item>
            <Item OnClick="@DeleteClick"><i class="btn btn-danger oi oi-delete"></i>Delete</Item>
        </ContextMenu>
    }


<input type="checkbox" class="check-cima" id="check" />
<label class="menu" for="check">|||</label>
<div class="left-panel">
    <ul>
        <a href="/">
            <i class="btn btn-success oi oi-home"></i>
            <label class="link-text" for="check">Cima</label>
        </a>
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
        <a href="/">
            <i class="btn btn-info oi oi-basket"></i>
            <label class="link-text" for="check">Access 1</label>
        </a>
        <br />
        <a href="/">
            <i class="btn btn-info oi oi-basket"></i>
            <label class="link-text" for="check">Access 2</label>
        </a>
        <br />
        <a href="/">
            <i class="btn btn-info oi oi-basket"></i>
            <label class="link-text" for="check">Access 3</label>
        </a>
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
        <a href="/">
            <i class="btn btn-light oi oi-account-login"></i>
            <label class="link-text" for="check">Home</label>
        </a>
        <br />
        <a href="/">
            <i class="btn btn-light oi oi-calendar"></i>
            <label class="link-text" for="check">Actualizar</label>
        </a>
        <br />
        <a href="/">
            <i class="btn btn-light oi oi-image"></i>
            <label class="link-text" for="check">Datos Personales</label>
        </a>
    </ul>
</div>

@code {
    private Employee[] employee;
    public int PageSize { get; set; }
    public int TotalPages { get; set; }
    public int CurrentPage { get; set; }
    public List<Employee> list { get; set; }
    public List<Employee> filteredList { get; set; }
    public bool IsTableFiltered { get; set; }

    [Parameter]
    public bool ReloadList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PageSize = 5;

        employee = await EmployeeService.GetForecastAsync(DateTime.Now);
        list = filteredList = employee.Take(PageSize).ToList();
        TotalPages = (int)Math.Ceiling(employee.Count() / (decimal)PageSize);

        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender && ReloadList)
        {
            UpdateList();
            ReloadList = false;

            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }

    private void UpdateList(int pageNumber = 0)
    {
        list = filteredList = employee.Skip(pageNumber * PageSize).Take(PageSize).ToList();
        TotalPages = (int)Math.Ceiling(employee.Count() / (decimal)PageSize);
        CurrentPage = pageNumber;
    }

    private void NavigateTo(string direction)
    {
        if (direction == "prev" && CurrentPage != 0)
            CurrentPage -= 1;
        if (direction == "next" && CurrentPage != TotalPages - 1)
            CurrentPage += 1;
        if (direction == "first")
            CurrentPage = 0;
        if (direction == "last")
            CurrentPage = TotalPages - 1;

        UpdateList(CurrentPage);
    }

    private void UpdateListSearch(List<Employee> listado)
    {
        int pageNumber = 0;
        list = filteredList = listado.Skip(pageNumber * PageSize).Take(PageSize).ToList();
        CurrentPage = pageNumber;
    }

    private void OnSearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
        string searchText = changeEventArgs.Value.ToString();
        IsTableFiltered = true;

        if (columnTitle == "Id")
            UpdateListSearch(employee.Where(wear => wear.Id.ToString().Contains(searchText)).ToList());
        if (columnTitle == "Name")
            UpdateListSearch(employee.Where(wear => wear.Name.Contains(searchText)).ToList());
        if (columnTitle == "LastName")
            UpdateListSearch(employee.Where(wear => wear.LastName.Contains(searchText)).ToList());
        if (columnTitle == "Direction")
            UpdateListSearch(employee.Where(wear => wear.Direction.Contains(searchText)).ToList());
    }

    public bool boolvalue { get; set; }

    void toggle()
    {
        boolvalue = !boolvalue;
    }

    async Task ReloadClick(ItemClickEventArgs e)
    {
        UpdateList();
    }

    void DeleteClick(ItemClickEventArgs e)
    {
        var currentRow = e.Data as Employee;
        list.Remove(currentRow);
        filteredList.Remove(currentRow);
    }

    async void message() {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Success Link!");
    }
}
